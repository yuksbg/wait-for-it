name: Build for ARM and x86

on:
  push:
    tags:
      - 'v*'  # Trigger workflow on tag pushes (e.g., v1.0.0)

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64, arm64]  # Build for both x86 (amd64) and ARM (arm64)

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      # Build the binaries for both architectures
      - name: Build binaries
        run: |
          mkdir -p dist
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o dist/wait-for-it-${{ matrix.goos }}-${{ matrix.goarch }}

      # Create a new GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}  # Use the tag that triggered the workflow
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Upload binaries as release assets
      - name: Upload binaries to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/wait-for-it-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_name: wait-for-it-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_content_type: application/octet-stream